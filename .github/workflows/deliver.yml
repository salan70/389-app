name: deliver

on:
  push:
    tags:
      - v*
  workflow_dispatch:

permissions:
  contents: read

jobs:
  android:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create keystore file
        env:
          ANDROID_KEY_JKS_BASE64: ${{ secrets.ANDROID_KEY_JKS_BASE64 }}
        run: |
          echo $ANDROID_KEY_JKS_BASE64 | base64 --decode > package/app/android/app/upload.jks

      - name: Create key.properties file
        env:
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD }}
        working-directory: package/app
        run: |
          echo "storeFile=./upload.jks" > android/key.properties
          echo "storePassword=$ANDROID_STORE_PASSWORD" >> android/key.properties
          echo "keyPassword=$ANDROID_KEY_PASSWORD" >> android/key.properties
          echo "keyAlias=$ANDROID_KEY_ALIAS" >> android/key.properties

      # .env ファイルを作成する。
      - name: Create dot env file
        shell: bash
        working-directory: package/app
        run: |
          touch .env
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
          echo "SUPABASE_API_KEY=${{ secrets.SUPABASE_API_KEY }}" >> .env
          echo "BANNER_ID_IOS=${{ secrets.BANNER_ID_IOS }}" >> .env
          echo "BANNER_ID_ANDROID=${{ secrets.BANNER_ID_ANDROID }}" >> .env
          echo "INTERSTITIAL_ID_IOS=${{ secrets.INTERSTITIAL_ID_IOS }}" >> .env
          echo "INTERSTITIAL_ID_ANDROID=${{ secrets.INTERSTITIAL_ID_ANDROID }}" >> .env
          echo "REWARD_ID_ANDROID=${{ secrets.REWARD_ID_ANDROID }}" >> .env
          echo "REWARD_ID_IOS=${{ secrets.REWARD_ID_IOS }}" >> .env

      - name: Setup Flutter
        id: setup-flutter
        uses: ./.github/actions/setup_flutter

      - name: Run flutter version
        run: flutter --version

      - name: Prepare Melos
        run: echo "MELOS_SDK_PATH=${{ steps.setup-flutter.outputs.flutter-path }}" >> "$GITHUB_ENV"

      - name: Install Melos
        uses: bluefireteam/melos-action@v3

      - name: Run melos bs
        run: melos bs

      - name: Get Version Number
        run: |
            echo "RELEASE_NAME=$(flutter pub run cider version | sed -E 's/([0-9.]+)\+([0-9]+)/\2(\1)/g')" >> $GITHUB_ENV
        working-directory: package/app

      - name: Build app bundle
        id: build
        run: |
          cd package/app
          flutter build appbundle --dart-define-from-file=dart_defines/prod.json

      - name: Get Package name
        run: |
          echo "PACKAGE_NAME=$(sed -nE 's/.*package="(.*)".*/\1/p' package/app/android/app/src/main/AndroidManifest.xml)" >> $GITHUB_ENV

      - name: Create google service account file
        env:
          GOOGLE_SERVICE_ACCOUNT_KEY_JSON_BASE64: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY_JSON_BASE64 }}
        working-directory: package/app
        run: |
          echo $GOOGLE_SERVICE_ACCOUNT_KEY_JSON_BASE64 | base64 --decode > android/service-account.json

      - name: Upload to Google Play
        id: upload
        uses: r0adkll/upload-google-play@78c9e796b1035c94169c101d8e46cb880194bfc3
        with:
          releaseFiles: package/app/build/app/outputs/bundle/release/app-release.aab
          serviceAccountJson: package/app/android/service-account.json
          packageName: ${{ env.PACKAGE_NAME }}
          releaseName: ${{ env.RELEASE_NAME }}
          track: production
          status: completed

  ios:
    runs-on: macos-latest
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Import Provisioning Profile
        env:
          IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo -n "$IOS_PROVISIONING_PROFILE_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/distribution.mobileprovision

      - name: Import Certificate
        env:
          IOS_CERTIFICATE_P12_BASE64: ${{ secrets.IOS_CERTIFICATE_P12_BASE64 }}
          IOS_CERTIFICATE_P12_P12_PASSWORD: ${{ secrets.IOS_CERTIFICATE_P12_PASSWORD }}
          IOS_KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate from secrets
          echo -n "$IOS_CERTIFICATE_P12_BASE64" | base64 --decode --output $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$IOS_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$IOS_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$IOS_CERTIFICATE_P12_P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      # .env ファイルを作成する。
      - name: Create dot env file
        shell: bash
        working-directory: package/app
        run: |
          touch .env
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
          echo "SUPABASE_API_KEY=${{ secrets.SUPABASE_API_KEY }}" >> .env
          echo "BANNER_ID_IOS=${{ secrets.BANNER_ID_IOS }}" >> .env
          echo "BANNER_ID_ANDROID=${{ secrets.BANNER_ID_ANDROID }}" >> .env
          echo "INTERSTITIAL_ID_IOS=${{ secrets.INTERSTITIAL_ID_IOS }}" >> .env
          echo "INTERSTITIAL_ID_ANDROID=${{ secrets.INTERSTITIAL_ID_ANDROID }}" >> .env
          echo "REWARD_ID_ANDROID=${{ secrets.REWARD_ID_ANDROID }}" >> .env
          echo "REWARD_ID_IOS=${{ secrets.REWARD_ID_IOS }}" >> .env


      - name: Setup Flutter
        id: setup-flutter
        uses: ./.github/actions/setup_flutter

      - name: Run flutter version
        run: flutter --version

      - name: Prepare Melos
        run: echo "MELOS_SDK_PATH=${{ steps.setup-flutter.outputs.flutter-path }}" >> "$GITHUB_ENV"

      - name: Install Melos
        uses: bluefireteam/melos-action@v3

      - name: Run melos bs
        run: melos bs

      - name: pod install
        run: |
          cd package/app/ios
          rm -rf Podfile.lock
          pod install

      - name: Build ipa
        id: build
        run: |
          cd package/app
          flutter build ipa --release --dart-define-from-file=dart_defines/prod.json --export-options-plist=ios/ExportOptions.plist

      - name: Detect path for ipa file
        run: |
          cd package/app
          if [ ! -d "build/ios/ipa" ]; then
            echo "build/ios/ipa directory does not exist."
            exit 1
          fi
          IPA_PATH=$(find build/ios/ipa -type f -name '*.ipa')
          if [ -z "$IPA_PATH" ]; then
            echo "No .ipa file found."
            exit 1
          fi
          echo "IPA_PATH=$IPA_PATH" >> $GITHUB_ENV
          echo $IPA_PATH

      - name: Upload to App Store Connect
        id: upload
        env:
          APPLE_APPLE_ID: ${{ secrets.APPLE_APPLE_ID }}
          APPLE_APP_PASS: ${{ secrets.APPLE_APP_PASS }}
        run: |
          cd package/app
          xcrun altool --upload-app --type ios -f "$IPA_PATH" -u "$APPLE_APPLE_ID" -p "$APPLE_APP_PASS"

      - name: Upload dsym artifacts to Firebase Crashlytics
        run: |
          cd package/app
          ios/Pods/FirebaseCrashlytics/upload-symbols -gsp ios/GoogleService-Info.plist -p ios build/ios/archive/Runner.xcarchive/dSYMs
